.PHONY: help install install-dev test test-unit test-integration lint format clean clean-all coverage docs security

# Default target
help:
	@echo "RFKilla Development Commands"
	@echo "============================"
	@echo ""
	@echo "Setup:"
	@echo "  install          Install package in development mode"
	@echo "  install-dev      Install package + development dependencies"
	@echo ""
	@echo "Testing:"
	@echo "  test             Run all tests"
	@echo "  test-unit        Run unit tests only"
	@echo "  test-integration Run integration tests only"
	@echo "  coverage         Run tests with coverage analysis"
	@echo ""
	@echo "Code Quality:"
	@echo "  lint             Run linting (flake8, pylint)"
	@echo "  format           Format code (black, isort)"
	@echo "  security         Run security scans (bandit, safety)"
	@echo ""
	@echo "Documentation:"
	@echo "  docs             Build documentation"
	@echo ""
	@echo "Maintenance:"
	@echo "  clean            Clean up build artifacts"
	@echo "  clean-all        Deep clean (builds, caches, venv, logs, backups)"
	@echo ""

# Installation
install:
	pip install -e .

install-dev:
	pip install -e .
	pip install -r requirements-dev.txt

# Testing
test:
	python tests/run_tests.py --verbose

test-unit:
	python tests/run_tests.py --verbose --no-lint --pattern "test_*.py"

test-integration:
	python tests/run_tests.py --verbose --integration

coverage:
	python tests/run_tests.py --coverage --verbose

# Code quality
lint:
	@echo "Running flake8..."
	flake8 rfkilla/
	@echo "Running pylint..."
	pylint rfkilla/ --disable=C0103,R0903,R0913

format:
	@echo "Formatting with black..."
	black rfkilla/ tests/
	@echo "Sorting imports with isort..."
	isort rfkilla/ tests/

security:
	@echo "Running bandit security scan..."
	bandit -r rfkilla/ -ll
	@echo "Running safety vulnerability check..."
	safety check

# Documentation
docs:
	@echo "Building documentation..."
	@if [ ! -d "docs" ]; then \
		mkdir docs; \
		cd docs; \
		sphinx-quickstart -p "RFKilla" -a "RFKilla Team" -v "1.0" --ext-autodoc --ext-viewcode --makefile --no-batchfile .; \
		echo "import os" >> conf.py; \
		echo "import sys" >> conf.py; \
		echo "sys.path.insert(0, os.path.abspath('..'))" >> conf.py; \
		echo "extensions.append('sphinx.ext.napoleon')" >> conf.py; \
		echo "html_theme = 'sphinx_rtd_theme'" >> conf.py; \
		sphinx-apidoc -o . ../rfkilla; \
	fi
	cd docs && make html
	@echo "Documentation built in docs/_build/html/"

# Maintenance
clean:
	@echo "Cleaning up build artifacts..."
	rm -rf build/
	rm -rf dist/
	rm -rf *.egg-info/
	rm -rf .pytest_cache/
	rm -rf .coverage
	rm -rf htmlcov/
	rm -rf docs/_build/
	find . -type d -name __pycache__ -exec rm -rf {} + 2>/dev/null || true
	find . -type f -name "*.pyc" -delete
	find . -type f -name "*.pyo" -delete

clean-all: clean
	@echo "Deep cleaning additional artifacts..."
	rm -rf venv/ .venv/ env/
	rm -rf rfkilla/logs/
	rm -f rfkilla.log monitor.log monitor2.log
	rm -rf data_backups/
	rm -f rfkilla/discovered.jsonl

# Development workflow shortcuts
dev-setup: install-dev
	@echo "Development environment setup complete!"
	@echo "Run 'make test' to verify everything works."

quick-test: format lint test-unit
	@echo "Quick development test cycle complete!"

full-test: format lint test coverage security
	@echo "Full test suite complete!"

# CI simulation
ci-test:
	@echo "Simulating CI pipeline..."
	make clean
	make install-dev
	make lint
	make test
	make security
	@echo "CI simulation complete!"

# Release preparation
pre-release: clean full-test docs
	@echo "Pre-release checks complete!"
	@echo "Ready for release preparation."
reset-data:
	@echo "üöÄ Resetting RFKilla auto-discovered data..."
	@python rfkilla/reset_auto_data.py

reset-data-dry:
	@echo "üîç DRY RUN - Showing what would be reset..."
	@python rfkilla/reset_auto_data.py --dry-run

.PHONY: reset-data reset-data-dry

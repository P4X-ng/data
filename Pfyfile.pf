# Pfyfile.pf â€” PacketFS ops tasks (env-first, "normal" syntax)
# Use:
#   NPROD=16 THREADS_LIST=1,2,4,8 pf.py agg_sweep
#   THREADS_LIST=1,2,4,8 SIZE_MB=4096 pf.py cpu_sweep
#   pf.py cpupwn
#   DURATION=3 CPU_RX=0 CPU_TX=1 PROG="xor:255" pf.py fastpath_sanity
#   DURATION=5 pf.py pnic_smoke
#   NPROD=8 THREADS=4 DURATION=5 pf.py agg_sim

# --- Aggregator scaling sweep (pNIC) ---
task agg_sweep
  describe pNIC aggregator scaling sweep -> logs/pnic_agg_sweep.csv
  shell NPROD="${NPROD:-16}" THREADS_LIST="${THREADS_LIST:-1,2,4,8,16,32,64,96,128}" DURATION="${DURATION:-4}" RING_POW2="${RING_POW2:-16}" DPF="${DPF:-64}" ALIGN="${ALIGN:-64}" BLOB_MB="${BLOB_MB:-1024}" OP="${OP:-xor}" IMM="${IMM:-255}" OUT="${OUT:-logs/pnic_agg_sweep.csv}" scripts/benchmarks/pnic_agg_sweep.sh
end

# --- CPU baseline scaling sweep ---
task cpu_sweep
  describe CPU baseline sweep -> logs/cpu_baseline_sweep.csv
  shell THREADS_LIST="${THREADS_LIST:-1,2,4,8,16,32,64,96,128}" SIZE_MB="${SIZE_MB:-4096}" OP="${OP:-xor8}" IMM="${IMM:-255}" OUT="${OUT:-logs/cpu_baseline_sweep.csv}" scripts/benchmarks/cpu_baseline_sweep.sh
end

# --- CPUpwn summary (join pNIC + CPU) ---
task cpupwn
  describe Join pNIC + CPU sweeps, emit CPUpwn -> logs/cpupwn_summary.csv
  shell /home/punk/.venv/bin/python scripts/benchmarks/cpupwn_summarize.py --pnic "${PNIC_CSV:-logs/pnic_agg_sweep.csv}" --cpu "${CPU_CSV:-logs/cpu_baseline_sweep.csv}" --out "${OUT:-logs/cpupwn_summary.csv}"
end

# --- Real /dev/pfs_fastpath sanity ---
task fastpath_sanity
  describe Real /dev/pfs_fastpath RX/TX sanity (DURATION, CPU_RX, CPU_TX, PROG)
  shell ./staging/fastpath/pfs_prog_rx --duration "${DURATION:-3}" --cpu "${CPU_RX:-0}" &
  shell sleep 0.2
  shell ./staging/fastpath/pfs_prog_tx --duration "${DURATION:-3}" --cpu "${CPU_TX:-1}" --prog "${PROG:-xor:255}"
end

# --- Local fake pNIC + pCPU smoke ---
task pnic_smoke
  describe Local fake pNIC+pCPU smoke (staging/pnic/pnic_pcpu)
  shell staging/pnic/pnic_pcpu --duration "${DURATION:-5}" --blob-mb "${BLOB_MB:-1024}" --ports "${PORTS:-1}" --queues "${QUEUES:-2}" --ring-pow2 "${RING_POW2:-16}" --dpf "${DPF:-64}" --align "${ALIGN:-64}" --pcpu 1 --pcpu-threads "${PCPU_THREADS:-2}" --nic-threads "${NIC_THREADS:-1}" --mode "${MODE:-scatter}" --op "${OP:-xor}" --imm "${IMM:-255}"
end

# --- Many-source sim: N shm producers + aggregator ---
task agg_sim
  describe Simulate N shm producers and run aggregator one-shot
  shell paths=""
  shell i=1; while [ "$i" -le "${NPROD:-4}" ]; do p=$(printf "/dev/shm/pnic_vm_%03d" "$i"); rm -f "$p"; (staging/pnic/pnic_tx_shm --path "$p" --ring-pow2 "${RING_POW2:-14}" --dpf "${DPF:-64}" --align "${ALIGN:-64}" --duration "${DURATION:-5}" --blob-mb "${BLOB_MB:-1024}" >/dev/null 2>&1 &); if [ -z "$paths" ]; then paths="$p"; else paths="$paths,$p"; fi; i=$((i+1)); done
  shell sleep 0.2
  shell staging/pnic/pnic_agg --endpoints "$paths" --threads "${THREADS:-4}" --duration "${DURATION:-5}" --blob-mb "${BLOB_MB:-1024}" --op "${OP:-xor}" --imm "${IMM:-255}"
end

# =====================
# Categorized developer tasks (dev-*, fs-*, net-*)
# =====================

# --- dev: environment & builds ---

task dev-setup
  describe Setup central venv tools (pip/setuptools/wheel)
  shell /home/punk/.venv/bin/python -m pip -q -U pip setuptools wheel
end

task dev-build-bitpack
  describe Build C extension and install package (editable)
  shell /home/punk/.venv/bin/python -m pip -q -U pip setuptools wheel
  shell /home/punk/.venv/bin/python -m pip -q install -e .
  shell /home/punk/.venv/bin/python - <<'PY'
import importlib
m = importlib.import_module("packetfs._bitpack")
print("bitpack import OK:", m.__name__)
PY
end

# --- dev: test/lint/format/clean ---

task dev-test
  describe Run unit tests (src/)
  shell /home/punk/.venv/bin/python -m pytest -q tests
end

task dev-test-dev
  describe Run dev/prototype tests (PYTHONPATH=realsrc)
  shell bash -lc 'PYTHONPATH=realsrc /home/punk/.venv/bin/python -m pytest -q dev/working/tests'
end

task dev-lint
  describe Lint (black --check, flake8)
  shell /home/punk/.venv/bin/python -m black --check src realsrc dev/working/tools
  shell /home/punk/.venv/bin/python -m flake8 src realsrc dev/working/tools
end

task dev-format
  describe Auto-format (black)
  shell /home/punk/.venv/bin/python -m black src realsrc dev/working/tools
end

task dev-clean
  describe Clean pyc and __pycache__
  shell bash -lc "find . -name '__pycache__' -type d -prune -exec rm -rf {} +"
  shell bash -lc "find . -name '*.pyc' -delete"
end

# --- fs: translate + mount ---

task fs-trans-daemon
  describe Translate files on arrival -> IPROGs in ./iprog (watch ./ingest)
  directory ./ingest
  directory ./iprog
  directory ./pfsmeta
  shell /home/punk/.venv/bin/python -m packetfs.tools.translate_daemon \
        --watch-dir ./ingest \
        --out-dir ./iprog \
        --blob-name pfs_vblob \
        --blob-size 1073741824 \
        --blob-seed 1337 \
        --meta-dir ./pfsmeta \
        --window 65536
end

task fs-mount
  describe Mount PacketFS (rw) -> ./pfs.mnt using ./iprog + virtual blob (foreground)
  directory ./pfs.mnt
  shell /home/punk/.venv/bin/python -m packetfs.filesystem.pfsfs_mount \
        --iprog-dir ./iprog \
        --mount ./pfs.mnt \
        --blob-name pfs_vblob \
        --blob-size 1073741824 \
        --blob-seed 1337 \
        --meta-dir ./pfsmeta \
        --window 65536 \
        --embed-pvrt \
        --foreground
end

task fs-mount-ro
  describe Mount PacketFS read-only -> ./pfs.mnt (foreground)
  directory ./pfs.mnt
  shell /home/punk/.venv/bin/python -m packetfs.filesystem.pfsfs_mount \
        --iprog-dir ./iprog \
        --mount ./pfs.mnt \
        --blob-name pfs_vblob \
        --blob-size 1073741824 \
        --blob-seed 1337 \
        --meta-dir ./pfsmeta \
        --window 65536 \
        --read-only \
        --foreground
end

# --- net: AF_PACKET smoke ---

task net-afpkt-smoke
  describe AF_PACKET RX 2s on lo (plan -> logs/plan_afpkt_smoke.json)
  directory logs
  shell bash -lc "if ! [ -x bin/pfs_afpkt_rx ]; then echo 'bin/pfs_afpkt_rx not found (build it first)'; exit 1; fi"
  shell bash -lc "taskset -c 0 bin/pfs_afpkt_rx --iface lo --duration 2 --blob-size $((64<<20)) --huge-dir /dev/hugepages --llvm-opt 1 --llvm-hint network/crc --peek-mmio 1 --plan-out logs/plan_afpkt_smoke.json --snaplen 64 --align 64 --pin-cpu-list 0"
end

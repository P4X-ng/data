# 🎆 HGWS Main Justfile - Command Orchestration Hub
# This is the main entry point that imports all modular Justfiles
# Each module handles specific functionality with helper scripts for complex logic

# Centralized shared variables
# simplified: no external imports
venv_path := "/home/punk/.venv"
web_port := "8888"
dns_zone := "pfs.internal."
dns_zonefile := "/var/lib/bind/db.pfs.internal"

# Import all modular Justfiles
# removed: import 'Justfile.dev'
# removed: import 'Justfile.prod'
# removed: import 'Justfile.test'
# removed: import 'Justfile.vm'
# removed: import 'Justfile.edge'
# removed: import 'Justfile.admin'
# removed: import 'Justfile.info'
# removed: import 'Justfile.cloud'
# removed: import 'Justfile.k8s'
# removed: import 'Justfile.nk'
# removed: import 'Justfile.net'

# Default recipe shows the main help
default: help

# Main help command - shows overview (focused, production-ready)
help-clean:
    @echo "PacketFS Infinity quick-start" && \
     echo "  just build          # build backend image" && \
     echo "  just up             # run server (TLS+QUIC); UDP offsets disabled" && \
     echo "  just down           # stop server" && \
     echo "  just logs           # follow logs" && \
     echo "" && \
     echo "Upload (creates IPROG with PVRT BREF):" && \
     echo "  curl -ks -X POST https://localhost:${PORT:-8811}/objects -F 'file=@/path/to/file'" && \
     echo "Start transfer (auto = iprog over QUIC/WSS -> HTTPS offsets):" && \
     echo "  curl -ks -X POST https://localhost:${PORT:-8811}/transfers -H 'Content-Type: application/json' -d '{\"object_id\":\"sha256:...\",\"mode\":\"auto\",\"peer\":{\"host\":\"localhost\",\"ws_port\":8811,\"https_port\":8811,\"udp_port\":8853},\"timeout_s\":5}'" && \
     echo "" && \
     echo "Notes:" && \
     echo "  - QUIC (UDP) is opportunistic; we fall back to HTTPS offsets for reachability."

# 🚀 UNIFIED RUN COMMAND - Everything Just Works!
run: oauth-run

# keep default help name per project rules
help: help-clean

# Run with OAuth/PacketFS system
oauth-run:
	@echo "🚀 Starting HGWS with OAuth & PacketFS..."
	@scripts/run/oauth_run.sh {{venv_path}} {{web_port}}

# Legacy run command
legacy-run:
    @bash scripts/start-all.sh

# Stop everything cleanly
stop *args:
    @bash scripts/stop-all.sh {{args}}

# Quick aliases for common tasks
build:
    @echo "Building arithmetic TS lib (app/web/pfs-arith) ..." && \
    npm --prefix ../web/pfs-arith ci >/dev/null 2>&1 || npm --prefix ../web/pfs-arith install && \
    npm --prefix ../web/pfs-arith run build && \
    echo "Building pfs-infinity container (backend) ..." && \
    podman build -t packetfs/pfs-infinity:latest -f ../../containers/backend/Containerfile ../../ && \
    echo "Built packetfs/pfs-infinity:latest"

# Build all container images (backend + pfs-native)
build-all:
    @echo "Building backend image (context: packetfs-infinity subdir)..." && \
    podman build -t packetfs/pfs-infinity:latest -f containers/backend/Containerfile . && \
    echo "Building pfs-native image (context: packetfs-infinity subdir)..." && \
    podman build -t packetfs/pfs-native:latest -f containers/pfs-native/Containerfile . && \
    echo "All images built."
up:
    @echo "Starting pfs-infinity..."
    @bash ../../scripts/run/pfs_infinity_up.sh
    @echo "Listening on https://localhost:${PORT:-8811}"

# Advanced UI explicitly (mirrors default 'up' but clarifies intent)
up-advanced:
    @echo "Starting pfs-infinity (advanced transfer-v2 UI)..."
    @just up

# 1 GiB blob with progressive fill progress banner (can override size)
up-big-blob:
    @echo "Starting with large blob (progressive fill)..."
    @PFS_BLOB_SIZE_BYTES=${PFS_BLOB_SIZE_BYTES:-1073741824} \
    PFS_BLOB_MAX_SIZE=${PFS_BLOB_MAX_SIZE:-1073741824} \
    PFS_BLOB_PROGRESSIVE_FILL=1 \
    PFS_BLOB_SKIP_FILL=0 \
    bash ../../scripts/run/pfs_infinity_up.sh
    @echo "Open https://localhost:${PORT:-8811}/"

# Skip initial fill (user can manually trigger later)
up-skip-fill:
    @echo "Starting with blob skip-fill (manual /blob/fill later)..."
    @PFS_BLOB_SIZE_BYTES=${PFS_BLOB_SIZE_BYTES:-1073741824} \
    PFS_BLOB_MAX_SIZE=${PFS_BLOB_MAX_SIZE:-1073741824} \
    PFS_BLOB_PROGRESSIVE_FILL=1 \
    PFS_BLOB_SKIP_FILL=1 \
    bash ../../scripts/run/pfs_infinity_up.sh
    @echo "Visit page then click 'Start Fill' in banner"

# Trigger manual progressive fill (requires running container)
blob-fill host="127.0.0.1" port="8811":
    @echo "Triggering /blob/fill on https://{{host}}:{{port}} ..."
    @curl -ks -X POST "https://{{host}}:{{port}}/blob/fill" | jq .

# Compression debug (adds PFS_COMPRESSION_DEBUG=1 env)
up-compression-debug:
    @echo "Starting with compression debug logging enabled..."
    @PFS_BLOB_SIZE_BYTES=${PFS_BLOB_SIZE_BYTES:-134217728} \
    PFS_BLOB_PROGRESSIVE_FILL=${PFS_BLOB_PROGRESSIVE_FILL:-1} \
    PFS_COMPRESSION_DEBUG=1 \
    PFS_DEBUG=${PFS_DEBUG:-1} \
    bash ../../scripts/run/pfs_infinity_up.sh
    @echo "Compression debug active; check 'just logs'"

# Unified power dev environment
dev-all:
    @echo "Starting combined dev environment (1GiB blob, progressive fill, compression debug, advanced UI)..."
    @PFS_BLOB_SIZE_BYTES=${PFS_BLOB_SIZE_BYTES:-1073741824} \
    PFS_BLOB_MAX_SIZE=${PFS_BLOB_MAX_SIZE:-1073741824} \
    PFS_BLOB_PROGRESSIVE_FILL=1 \
    PFS_BLOB_SKIP_FILL=0 \
    PFS_COMPRESSION_DEBUG=1 \
    PFS_DEBUG=${PFS_DEBUG:-1} \
    bash ../../scripts/run/pfs_infinity_up.sh
    @echo "Open https://localhost:${PORT:-8811}/"

# Print environment flag documentation
docs-env:
    @echo "Environment Flags:" && \
    echo "  PFS_BLOB_SIZE_BYTES       - Desired virtual blob size (default 1GiB in code, 128MiB in up)" && \
    echo "  PFS_BLOB_MAX_SIZE         - Safety clamp maximum (default 512MiB unless overridden)" && \
    echo "  PFS_BLOB_SEED             - Deterministic PRNG seed for blob content (default 1337)" && \
    echo "  PFS_BLOB_SKIP_FILL        - If 1, do not fill blob on startup (user can POST /blob/fill)" && \
    echo "  PFS_BLOB_PROGRESSIVE_FILL - If 1, fill in async chunks reporting progress (default on)" && \
    echo "  PFS_BLOB_AUTO             - Auto-create blob at startup (1 default)" && \
    echo "  PFS_SHM_SIZE              - Host shared memory size passed to container --shm-size (e.g. 512m, 2g)" && \
    echo "  PFS_SIMPLE_XFER           - Serve simple upload/download page at root (1 = enable)" && \
    echo "  PFS_ENABLE_TERMINAL       - Enable experimental terminal UI/WS (1 = enable)" && \
    echo "  PFS_COMPRESSION_DEBUG     - Verbose compression/iprog diagnostics (1 = enable)" && \
    echo "  PFS_ARITH                 - Placeholder flag for arithmetic pipeline (1 = enable)" && \
    echo "  PFS_DEBUG                 - General verbose debug logging" && \
    echo "  PFS_QUIC_ENABLE           - Enable QUIC listener (1 default)" && \
    echo "  PORT / WS_PORT            - External / internal listening port" && \
    echo "Usage examples:" && \
    echo "  just up-big-blob PFS_BLOB_SIZE_BYTES=$$((2**30))" && \
    echo "  PFS_DEBUG=1 just up-compression-debug"

# Run with simple upload/download UI by default
up-simple:
    @echo "Starting pfs-infinity (simple transfer UI)..."
    @PFS_BLOB_SIZE_BYTES=${PFS_BLOB_SIZE_BYTES:-134217728} \
    PFS_SIMPLE_XFER=1 \
    PFS_ENABLE_TERMINAL=0 \
    bash ../../scripts/run/pfs_infinity_up.sh
    @echo "Open https://localhost:${PORT:-8811}/ (xfer-simple)"
down:
    @echo "Stopping pfs-infinity..."
    @podman stop pfs-infinity 2>/dev/null || true
    @podman rm pfs-infinity 2>/dev/null || true
    @echo "Stopped"
test: test-all

test-all:
    @echo "Smoke tests placeholder (upload/download UI)."
status:
    @podman ps | grep pfs-infinity || echo "Not running"
logs:
    @podman logs -f pfs-infinity

# Front proxy no longer required: backend serves TLS directly
front:
    @echo "[deprecated] Front proxy is not needed. Run: just up-front"
front-stop:
    @echo "[deprecated] Front proxy is not needed. Run: just down"

# One-command bring-up: backend with built-in TLS (no host proxy)
up-front:
    @echo "Starting backend (TLS in-container)..."
    @bash ../../scripts/run/pfs_infinity_up.sh
    @echo "Open https://localhost:${PORT:-8811}/"
clean:
    @echo "Cleaning up..."
    @podman rm -f pfs-infinity 2>/dev/null || true
    @podman image prune -f >/dev/null 2>&1 || true
    @rm -rf /tmp/pfs-infinity 2>/dev/null || true
    @echo "Cleaned"

# Upload a local file to the running server (HTTPS; -k for self-signed)
xfer-upload file host="127.0.0.1" port="8811":
    @if [ ! -f "{{file}}" ]; then echo "file not found: {{file}}" >&2; exit 1; fi
    @echo "Uploading {{file}} -> https://{{host}}:{{port}}/objects"
    @curl -ks -X POST "https://{{host}}:{{port}}/objects" -F "file=@{{file}}" | jq .

# List stored objects on the server
list-objects host="127.0.0.1" port="8811":
    @curl -ks "https://{{host}}:{{port}}/objects" | jq .

# Full rebuild (no cache) for backend image
dev-rebuild:
    @echo "Rebuilding arithmetic TS lib (no cache-ish) ..." && \
    npm --prefix ../web/pfs-arith ci >/dev/null 2>&1 || npm --prefix ../web/pfs-arith install && \
    npm --prefix ../web/pfs-arith run build && \
    echo "Rebuilding pfs-infinity container (no cache) ..." && \
    podman build --no-cache -t packetfs/pfs-infinity:latest -f ../../containers/backend/Containerfile ../../ && \
    echo "Rebuilt packetfs/pfs-infinity:latest"

# Rebuild all images (no cache)
rebuild-all:
    @echo "Rebuilding arithmetic TS lib ..." && \
    npm --prefix ../web/pfs-arith ci >/dev/null 2>&1 || npm --prefix ../web/pfs-arith install && \
    npm --prefix ../web/pfs-arith run build && \
    echo "Rebuilding ALL images (no cache) ..." && \
    podman build --no-cache -t packetfs/pfs-infinity:latest -f ../../containers/backend/Containerfile ../../ && \
    podman build --no-cache -t packetfs/pfs-native:latest -f ../../containers/pfs-native/Containerfile ../../ && \
    echo "All images rebuilt (no cache)."

# Three simple commands (UX): rebuild (no cache), up, down
# 'rebuild' is a no-cache build of the backend image and ensures the web library is built
rebuild: dev-rebuild

# DNS update shortcut (uses /usr/local/sbin/hgws-zone-update)
update-dns *args:
    @echo "Updating DNS zone {{dns_zone}} using {{dns_zonefile}}"
    @if [ "$(id -u)" -ne 0 ]; then \
        sudo ZONE={{dns_zone}} ZONEFILE={{dns_zonefile}} /usr/local/sbin/hgws-zone-update {{args}}; \
      else \
        ZONE={{dns_zone}} ZONEFILE={{dns_zonefile}} /usr/local/sbin/hgws-zone-update {{args}}; \
      fi

# Quick test commands (use 'just test-api' for full test suite)
api-test:
    @echo "🧪 Running API endpoint tests..."
    @python3 test_actual_endpoints.py

playwright-test:
    @echo "🎭 Running Playwright browser tests..."
    @npx playwright test --reporter=list

# UI test using Playwright against the F3 Transfer page
# Usage:
#   just test-ui                      # uses http://localhost:{{web_port}}
#   just test-ui BASE=https://host    # override base URL
#   just test-ui-install              # install browsers + system deps
test-ui BASE="":
    @echo "Running Playwright UI tests..."
    @BASE_URL={{if BASE != "" { BASE } else { "http://localhost:" + web_port } }} TEST_BASE_URL=$$BASE_URL npx -y @playwright/test@latest test tests/ui/transfer_v2.spec.ts --reporter=list

test-ui-install:
    @echo "Installing Playwright browsers and system deps..."
    @npx -y @playwright/test@latest install --with-deps

quick-test:
    @echo "⚡ Running quick smoke tests..."
    @curl -s http://localhost:8888/healthz | jq '.status' 2>/dev/null || echo "API not responding"
    @curl -s http://localhost:8888/api/containers | jq '. | length' 2>/dev/null || echo "0 containers"
    @curl -s http://localhost:8888/api/vms | jq '. | length' 2>/dev/null || echo "0 VMs"

# HGWS CLI shortcut
hgws *args:
    @~/.local/bin/hgws {{args}}

# 🔐 OAuth & Authentication Commands
oauth-setup:
	@echo "🔐 Setting up OAuth providers..."
	@echo "Visit these URLs to create OAuth apps:"
	@echo "  Google: https://console.cloud.google.com/"
	@echo "  GitHub: https://github.com/settings/developers"
	@echo "  Discord: https://discord.com/developers/applications"
	@echo ""
	@echo "Add redirect URL: http://localhost:{{web_port}}/auth/callback/{provider}"
	@echo "Then edit .env with your CLIENT_ID and CLIENT_SECRET"

oauth-test:
	@echo "🧪 Testing OAuth configuration..."
	@curl -s http://localhost:{{web_port}}/auth/providers | jq '.providers[] | {name, display_name}'

# 📦 PacketFS Storage Commands  
packetfs-status:
	@echo "📦 Checking PacketFS instances..."
	@curl -s http://localhost:{{web_port}}/api/storage/packetfs/status | jq '.'

packetfs-deploy vlan_id tskey="":
	@echo "🚀 Deploying PacketFS for VLAN {{vlan_id}}..."
	@curl -X POST "http://localhost:{{web_port}}/api/storage/packetfs/deploy/{{vlan_id}}?ts_authkey={{tskey}}" | jq '.'

# 🖥️ VM Storage (PacketFS inside VM)  
vm-provision-storage vlan_id tskey vm_img mem="2048" vcpus="2":
	@echo "Provisioning storage VM on VLAN {{vlan_id}} (bridge vlan{{vlan_id}})"
	WEB_PORT={{web_port}} VLAN_ID={{vlan_id}} TSKEY="{{tskey}}" VM_IMG="{{vm_img}}" MEM={{mem}} VCPUS={{vcpus}} bash scripts/helpers/vm-provision-storage.sh

# 🌐 VLAN Management
vlan-create customer_id vlan_id:
	@echo "🌐 Creating VLAN {{vlan_id}} for customer {{customer_id}}..."
	@curl -X POST http://localhost:{{web_port}}/api/vlans/create -H "Content-Type: application/json" -d '{"vlan_id": {{vlan_id}}, "customer_id": "{{customer_id}}"}' | jq '.'

vlan-list:
	@echo "📋 Listing VLANs..."
	@curl -s http://localhost:{{web_port}}/api/vlans/list | jq '.'

# 🎯 Quick Demo Flow
demo-user email="demo@example.com":
    @echo "🎯 Demo: Creating user with email {{email}}"
    @python3 -c "import hashlib; email='{{email}}'; cid=hashlib.sha256(email.encode()).hexdigest()[:12]; vid=100+(int(hashlib.sha256(cid.encode()).hexdigest()[:4],16)%3994); print(f'Customer ID: {cid}\nVLAN ID: {vid}')"
    @echo "Use these values to manually create VLAN and deploy PacketFS"

# 🔥 Full Stack Commands
stack-up:
	@just oauth-run &
	@sleep 2
	@echo "✅ HGWS running at http://localhost:{{web_port}}"
	@echo "📝 Configure OAuth providers in .env first!"

stack-down:
	@pkill -f "uvicorn app:app" || true
	@echo "🛑 HGWS stopped"

stack-logs:
	@tail -f hgws.log 2>/dev/null || echo "No logs yet. Run 'just stack-up' first"

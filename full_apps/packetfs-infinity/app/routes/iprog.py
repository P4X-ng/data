"""
IPROG ingestion endpoint for client-side PacketFS compression
"""
from __future__ import annotations

import hashlib
import json
from fastapi import APIRouter, Body, HTTPException
from app.core.state import BLUEPRINTS, CURRENT_BLOB

router = APIRouter()


@router.post("/objects/from-iprog")
async def create_object_from_iprog(payload: dict = Body(...)):
    """
    Accept an IPROG generated by client-side PacketFS compression.
    The IPROG contains BREF chunks referencing the shared blob.
    """
    try:
        # Validate IPROG structure
        if not isinstance(payload, dict):
            raise HTTPException(status_code=400, detail="Invalid IPROG format")
        
        # Extract key fields
        sha256 = payload.get("sha256", "")
        size = payload.get("size", 0)
        windows = payload.get("windows", [])
        blob_info = payload.get("blob", {})
        metadata = payload.get("metadata", {})
        
        if not sha256 or not size:
            raise HTTPException(status_code=400, detail="Missing required fields: sha256 or size")
        
        # Verify blob compatibility
        if not CURRENT_BLOB:
            raise HTTPException(status_code=503, detail="Server blob not initialized")
        
        server_blob = CURRENT_BLOB
        client_blob_name = blob_info.get("name", "")
        client_blob_size = blob_info.get("size", 0)
        client_blob_seed = blob_info.get("seed", 0)
        
        # Check if client and server blobs match
        if (server_blob.get("name") != client_blob_name or
            server_blob.get("size") != client_blob_size or
            server_blob.get("seed") != client_blob_seed):
            
            # Log mismatch for debugging
            print(f"Blob mismatch - Server: {server_blob}, Client: {blob_info}")
            # For now, continue anyway as the reconstruction will handle it
        
        # Generate object ID
        obj_id = f"sha256:{sha256}"
        
        # Calculate compressed size from windows
        compressed_size = 0
        for window in windows:
            compressed_size += window.get("compressed_size", 0)
        
        # Calculate compression metrics
        tx_ratio = compressed_size / size if size > 0 else 1.0
        compression_ratio = metadata.get("compression_ratio", 1.0)
        
        # Store the IPROG in blueprints
        BLUEPRINTS[obj_id] = {
            "version": 1,
            "size": size,
            "sha256": sha256,
            "filename": metadata.get("filename", ""),
            "iprog": payload,
            "compressed_size": compressed_size,
            "tx_ratio": tx_ratio,
            "compression_ratio": float(compression_ratio),
            "client_compressed": True,  # Mark as client-compressed
        }
        
        # Return success response
        return {
            "object_id": obj_id,
            "size": size,
            "sha256": sha256,
            "compressed_size": compressed_size,
            "tx_ratio": tx_ratio,
            "compression_ratio": float(compression_ratio),
            "status": "success",
            "message": f"IPROG accepted - {float(compression_ratio):.2f}x compression achieved"
        }
        
    except HTTPException:
        raise
    except Exception as e:
        print(f"Error processing IPROG: {e}")
        raise HTTPException(status_code=500, detail=f"Failed to process IPROG: {str(e)}")
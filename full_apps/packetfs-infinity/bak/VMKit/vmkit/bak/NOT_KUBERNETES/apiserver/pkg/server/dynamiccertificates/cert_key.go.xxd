00000000: 2f2a 0a43 6f70 7972 6967 6874 2032 3031  /*.Copyright 201
00000010: 3920 5468 6520 4b75 6265 726e 6574 6573  9 The Kubernetes
00000020: 2041 7574 686f 7273 2e0a 0a4c 6963 656e   Authors...Licen
00000030: 7365 6420 756e 6465 7220 7468 6520 4170  sed under the Ap
00000040: 6163 6865 204c 6963 656e 7365 2c20 5665  ache License, Ve
00000050: 7273 696f 6e20 322e 3020 2874 6865 2022  rsion 2.0 (the "
00000060: 4c69 6365 6e73 6522 293b 0a79 6f75 206d  License");.you m
00000070: 6179 206e 6f74 2075 7365 2074 6869 7320  ay not use this 
00000080: 6669 6c65 2065 7863 6570 7420 696e 2063  file except in c
00000090: 6f6d 706c 6961 6e63 6520 7769 7468 2074  ompliance with t
000000a0: 6865 204c 6963 656e 7365 2e0a 596f 7520  he License..You 
000000b0: 6d61 7920 6f62 7461 696e 2061 2063 6f70  may obtain a cop
000000c0: 7920 6f66 2074 6865 204c 6963 656e 7365  y of the License
000000d0: 2061 740a 0a20 2020 2068 7474 703a 2f2f   at..    http://
000000e0: 7777 772e 6170 6163 6865 2e6f 7267 2f6c  www.apache.org/l
000000f0: 6963 656e 7365 732f 4c49 4345 4e53 452d  icenses/LICENSE-
00000100: 322e 300a 0a55 6e6c 6573 7320 7265 7175  2.0..Unless requ
00000110: 6972 6564 2062 7920 6170 706c 6963 6162  ired by applicab
00000120: 6c65 206c 6177 206f 7220 6167 7265 6564  le law or agreed
00000130: 2074 6f20 696e 2077 7269 7469 6e67 2c20   to in writing, 
00000140: 736f 6674 7761 7265 0a64 6973 7472 6962  software.distrib
00000150: 7574 6564 2075 6e64 6572 2074 6865 204c  uted under the L
00000160: 6963 656e 7365 2069 7320 6469 7374 7269  icense is distri
00000170: 6275 7465 6420 6f6e 2061 6e20 2241 5320  buted on an "AS 
00000180: 4953 2220 4241 5349 532c 0a57 4954 484f  IS" BASIS,.WITHO
00000190: 5554 2057 4152 5241 4e54 4945 5320 4f52  UT WARRANTIES OR
000001a0: 2043 4f4e 4449 5449 4f4e 5320 4f46 2041   CONDITIONS OF A
000001b0: 4e59 204b 494e 442c 2065 6974 6865 7220  NY KIND, either 
000001c0: 6578 7072 6573 7320 6f72 2069 6d70 6c69  express or impli
000001d0: 6564 2e0a 5365 6520 7468 6520 4c69 6365  ed..See the Lice
000001e0: 6e73 6520 666f 7220 7468 6520 7370 6563  nse for the spec
000001f0: 6966 6963 206c 616e 6775 6167 6520 676f  ific language go
00000200: 7665 726e 696e 6720 7065 726d 6973 7369  verning permissi
00000210: 6f6e 7320 616e 640a 6c69 6d69 7461 7469  ons and.limitati
00000220: 6f6e 7320 756e 6465 7220 7468 6520 4c69  ons under the Li
00000230: 6365 6e73 652e 0a2a 2f0a 0a70 6163 6b61  cense..*/..packa
00000240: 6765 2064 796e 616d 6963 6365 7274 6966  ge dynamiccertif
00000250: 6963 6174 6573 0a0a 696d 706f 7274 2028  icates..import (
00000260: 0a09 2262 7974 6573 220a 290a 0a2f 2f20  .."bytes".)..// 
00000270: 6365 7274 4b65 7943 6f6e 7465 6e74 2068  certKeyContent h
00000280: 6f6c 6473 2074 6865 2063 6f6e 7465 6e74  olds the content
00000290: 2066 6f72 2074 6865 2063 6572 7420 616e   for the cert an
000002a0: 6420 6b65 790a 7479 7065 2063 6572 744b  d key.type certK
000002b0: 6579 436f 6e74 656e 7420 7374 7275 6374  eyContent struct
000002c0: 207b 0a09 6365 7274 205b 5d62 7974 650a   {..cert []byte.
000002d0: 096b 6579 2020 5b5d 6279 7465 0a7d 0a0a  .key  []byte.}..
000002e0: 6675 6e63 2028 6320 2a63 6572 744b 6579  func (c *certKey
000002f0: 436f 6e74 656e 7429 2045 7175 616c 2872  Content) Equal(r
00000300: 6873 202a 6365 7274 4b65 7943 6f6e 7465  hs *certKeyConte
00000310: 6e74 2920 626f 6f6c 207b 0a09 6966 2063  nt) bool {..if c
00000320: 203d 3d20 6e69 6c20 7c7c 2072 6873 203d   == nil || rhs =
00000330: 3d20 6e69 6c20 7b0a 0909 7265 7475 726e  = nil {...return
00000340: 2063 203d 3d20 7268 730a 097d 0a0a 0972   c == rhs..}...r
00000350: 6574 7572 6e20 6279 7465 732e 4571 7561  eturn bytes.Equa
00000360: 6c28 632e 6b65 792c 2072 6873 2e6b 6579  l(c.key, rhs.key
00000370: 2920 2626 2062 7974 6573 2e45 7175 616c  ) && bytes.Equal
00000380: 2863 2e63 6572 742c 2072 6873 2e63 6572  (c.cert, rhs.cer
00000390: 7429 0a7d 0a0a 2f2f 2073 6e69 4365 7274  t).}..// sniCert
000003a0: 4b65 7943 6f6e 7465 6e74 2068 6f6c 6473  KeyContent holds
000003b0: 2074 6865 2063 6f6e 7465 6e74 2066 6f72   the content for
000003c0: 2074 6865 2063 6572 7420 616e 6420 6b65   the cert and ke
000003d0: 7920 6173 2077 656c 6c20 6173 2061 6e79  y as well as any
000003e0: 2065 7870 6c69 6369 7420 6e61 6d65 730a   explicit names.
000003f0: 7479 7065 2073 6e69 4365 7274 4b65 7943  type sniCertKeyC
00000400: 6f6e 7465 6e74 2073 7472 7563 7420 7b0a  ontent struct {.
00000410: 0963 6572 744b 6579 436f 6e74 656e 740a  .certKeyContent.
00000420: 0973 6e69 4e61 6d65 7320 5b5d 7374 7269  .sniNames []stri
00000430: 6e67 0a7d 0a0a 6675 6e63 2028 6320 2a73  ng.}..func (c *s
00000440: 6e69 4365 7274 4b65 7943 6f6e 7465 6e74  niCertKeyContent
00000450: 2920 4571 7561 6c28 7268 7320 2a73 6e69  ) Equal(rhs *sni
00000460: 4365 7274 4b65 7943 6f6e 7465 6e74 2920  CertKeyContent) 
00000470: 626f 6f6c 207b 0a09 6966 2063 203d 3d20  bool {..if c == 
00000480: 6e69 6c20 7c7c 2072 6873 203d 3d20 6e69  nil || rhs == ni
00000490: 6c20 7b0a 0909 7265 7475 726e 2063 203d  l {...return c =
000004a0: 3d20 7268 730a 097d 0a0a 0969 6620 6c65  = rhs..}...if le
000004b0: 6e28 632e 736e 694e 616d 6573 2920 213d  n(c.sniNames) !=
000004c0: 206c 656e 2872 6873 2e73 6e69 4e61 6d65   len(rhs.sniName
000004d0: 7329 207b 0a09 0972 6574 7572 6e20 6661  s) {...return fa
000004e0: 6c73 650a 097d 0a0a 0966 6f72 2069 203a  lse..}...for i :
000004f0: 3d20 7261 6e67 6520 632e 736e 694e 616d  = range c.sniNam
00000500: 6573 207b 0a09 0969 6620 632e 736e 694e  es {...if c.sniN
00000510: 616d 6573 5b69 5d20 213d 2072 6873 2e73  ames[i] != rhs.s
00000520: 6e69 4e61 6d65 735b 695d 207b 0a09 0909  niNames[i] {....
00000530: 7265 7475 726e 2066 616c 7365 0a09 097d  return false...}
00000540: 0a09 7d0a 0a09 7265 7475 726e 2063 2e63  ..}...return c.c
00000550: 6572 744b 6579 436f 6e74 656e 742e 4571  ertKeyContent.Eq
00000560: 7561 6c28 2672 6873 2e63 6572 744b 6579  ual(&rhs.certKey
00000570: 436f 6e74 656e 7429 0a7d 0a              Content).}.

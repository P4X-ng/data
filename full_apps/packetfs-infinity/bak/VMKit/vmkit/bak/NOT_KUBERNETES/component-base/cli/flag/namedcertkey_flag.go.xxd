00000000: 2f2a 0a43 6f70 7972 6967 6874 2032 3031  /*.Copyright 201
00000010: 3620 5468 6520 4b75 6265 726e 6574 6573  6 The Kubernetes
00000020: 2041 7574 686f 7273 2e0a 0a4c 6963 656e   Authors...Licen
00000030: 7365 6420 756e 6465 7220 7468 6520 4170  sed under the Ap
00000040: 6163 6865 204c 6963 656e 7365 2c20 5665  ache License, Ve
00000050: 7273 696f 6e20 322e 3020 2874 6865 2022  rsion 2.0 (the "
00000060: 4c69 6365 6e73 6522 293b 0a79 6f75 206d  License");.you m
00000070: 6179 206e 6f74 2075 7365 2074 6869 7320  ay not use this 
00000080: 6669 6c65 2065 7863 6570 7420 696e 2063  file except in c
00000090: 6f6d 706c 6961 6e63 6520 7769 7468 2074  ompliance with t
000000a0: 6865 204c 6963 656e 7365 2e0a 596f 7520  he License..You 
000000b0: 6d61 7920 6f62 7461 696e 2061 2063 6f70  may obtain a cop
000000c0: 7920 6f66 2074 6865 204c 6963 656e 7365  y of the License
000000d0: 2061 740a 0a20 2020 2068 7474 703a 2f2f   at..    http://
000000e0: 7777 772e 6170 6163 6865 2e6f 7267 2f6c  www.apache.org/l
000000f0: 6963 656e 7365 732f 4c49 4345 4e53 452d  icenses/LICENSE-
00000100: 322e 300a 0a55 6e6c 6573 7320 7265 7175  2.0..Unless requ
00000110: 6972 6564 2062 7920 6170 706c 6963 6162  ired by applicab
00000120: 6c65 206c 6177 206f 7220 6167 7265 6564  le law or agreed
00000130: 2074 6f20 696e 2077 7269 7469 6e67 2c20   to in writing, 
00000140: 736f 6674 7761 7265 0a64 6973 7472 6962  software.distrib
00000150: 7574 6564 2075 6e64 6572 2074 6865 204c  uted under the L
00000160: 6963 656e 7365 2069 7320 6469 7374 7269  icense is distri
00000170: 6275 7465 6420 6f6e 2061 6e20 2241 5320  buted on an "AS 
00000180: 4953 2220 4241 5349 532c 0a57 4954 484f  IS" BASIS,.WITHO
00000190: 5554 2057 4152 5241 4e54 4945 5320 4f52  UT WARRANTIES OR
000001a0: 2043 4f4e 4449 5449 4f4e 5320 4f46 2041   CONDITIONS OF A
000001b0: 4e59 204b 494e 442c 2065 6974 6865 7220  NY KIND, either 
000001c0: 6578 7072 6573 7320 6f72 2069 6d70 6c69  express or impli
000001d0: 6564 2e0a 5365 6520 7468 6520 4c69 6365  ed..See the Lice
000001e0: 6e73 6520 666f 7220 7468 6520 7370 6563  nse for the spec
000001f0: 6966 6963 206c 616e 6775 6167 6520 676f  ific language go
00000200: 7665 726e 696e 6720 7065 726d 6973 7369  verning permissi
00000210: 6f6e 7320 616e 640a 6c69 6d69 7461 7469  ons and.limitati
00000220: 6f6e 7320 756e 6465 7220 7468 6520 4c69  ons under the Li
00000230: 6365 6e73 652e 0a2a 2f0a 0a70 6163 6b61  cense..*/..packa
00000240: 6765 2066 6c61 670a 0a69 6d70 6f72 7420  ge flag..import 
00000250: 280a 0922 6572 726f 7273 220a 0922 666c  (.."errors".."fl
00000260: 6167 220a 0922 7374 7269 6e67 7322 0a29  ag".."strings".)
00000270: 0a0a 2f2f 204e 616d 6564 4365 7274 4b65  ..// NamedCertKe
00000280: 7920 6973 2061 2066 6c61 6720 7661 6c75  y is a flag valu
00000290: 6520 7061 7273 696e 6720 2263 6572 7466  e parsing "certf
000002a0: 696c 652c 6b65 7966 696c 6522 2061 6e64  ile,keyfile" and
000002b0: 2022 6365 7274 6669 6c65 2c6b 6579 6669   "certfile,keyfi
000002c0: 6c65 3a6e 616d 652c 6e61 6d65 2c6e 616d  le:name,name,nam
000002d0: 6522 2e0a 7479 7065 204e 616d 6564 4365  e"..type NamedCe
000002e0: 7274 4b65 7920 7374 7275 6374 207b 0a09  rtKey struct {..
000002f0: 4e61 6d65 7320 2020 2020 2020 2020 2020  Names           
00000300: 2020 5b5d 7374 7269 6e67 0a09 4365 7274    []string..Cert
00000310: 4669 6c65 2c20 4b65 7946 696c 6520 7374  File, KeyFile st
00000320: 7269 6e67 0a7d 0a0a 7661 7220 5f20 666c  ring.}..var _ fl
00000330: 6167 2e56 616c 7565 203d 2026 4e61 6d65  ag.Value = &Name
00000340: 6443 6572 744b 6579 7b7d 0a0a 6675 6e63  dCertKey{}..func
00000350: 2028 6e6b 6320 2a4e 616d 6564 4365 7274   (nkc *NamedCert
00000360: 4b65 7929 2053 7472 696e 6728 2920 7374  Key) String() st
00000370: 7269 6e67 207b 0a09 7320 3a3d 206e 6b63  ring {..s := nkc
00000380: 2e43 6572 7446 696c 6520 2b20 222c 2220  .CertFile + "," 
00000390: 2b20 6e6b 632e 4b65 7946 696c 650a 0969  + nkc.KeyFile..i
000003a0: 6620 6c65 6e28 6e6b 632e 4e61 6d65 7329  f len(nkc.Names)
000003b0: 203e 2030 207b 0a09 0973 203d 2073 202b   > 0 {...s = s +
000003c0: 2022 3a22 202b 2073 7472 696e 6773 2e4a   ":" + strings.J
000003d0: 6f69 6e28 6e6b 632e 4e61 6d65 732c 2022  oin(nkc.Names, "
000003e0: 2c22 290a 097d 0a09 7265 7475 726e 2073  ,")..}..return s
000003f0: 0a7d 0a0a 6675 6e63 2028 6e6b 6320 2a4e  .}..func (nkc *N
00000400: 616d 6564 4365 7274 4b65 7929 2053 6574  amedCertKey) Set
00000410: 2876 616c 7565 2073 7472 696e 6729 2065  (value string) e
00000420: 7272 6f72 207b 0a09 6373 203a 3d20 7374  rror {..cs := st
00000430: 7269 6e67 732e 5370 6c69 744e 2876 616c  rings.SplitN(val
00000440: 7565 2c20 223a 222c 2032 290a 0976 6172  ue, ":", 2)..var
00000450: 206b 6579 6365 7274 2073 7472 696e 670a   keycert string.
00000460: 0969 6620 6c65 6e28 6373 2920 3d3d 2032  .if len(cs) == 2
00000470: 207b 0a09 0976 6172 206e 616d 6573 2073   {...var names s
00000480: 7472 696e 670a 0909 6b65 7963 6572 742c  tring...keycert,
00000490: 206e 616d 6573 203d 2073 7472 696e 6773   names = strings
000004a0: 2e54 7269 6d53 7061 6365 2863 735b 305d  .TrimSpace(cs[0]
000004b0: 292c 2073 7472 696e 6773 2e54 7269 6d53  ), strings.TrimS
000004c0: 7061 6365 2863 735b 315d 290a 0909 6966  pace(cs[1])...if
000004d0: 206e 616d 6573 203d 3d20 2222 207b 0a09   names == "" {..
000004e0: 0909 7265 7475 726e 2065 7272 6f72 732e  ..return errors.
000004f0: 4e65 7728 2265 6d70 7479 206e 616d 6573  New("empty names
00000500: 206c 6973 7420 6973 206e 6f74 2061 6c6c   list is not all
00000510: 6f77 6564 2229 0a09 097d 0a09 096e 6b63  owed")...}...nkc
00000520: 2e4e 616d 6573 203d 206e 696c 0a09 0966  .Names = nil...f
00000530: 6f72 205f 2c20 6e61 6d65 203a 3d20 7261  or _, name := ra
00000540: 6e67 6520 7374 7269 6e67 732e 5370 6c69  nge strings.Spli
00000550: 7428 6e61 6d65 732c 2022 2c22 2920 7b0a  t(names, ",") {.
00000560: 0909 096e 6b63 2e4e 616d 6573 203d 2061  ...nkc.Names = a
00000570: 7070 656e 6428 6e6b 632e 4e61 6d65 732c  ppend(nkc.Names,
00000580: 2073 7472 696e 6773 2e54 7269 6d53 7061   strings.TrimSpa
00000590: 6365 286e 616d 6529 290a 0909 7d0a 097d  ce(name))...}..}
000005a0: 2065 6c73 6520 7b0a 0909 6e6b 632e 4e61   else {...nkc.Na
000005b0: 6d65 7320 3d20 6e69 6c0a 0909 6b65 7963  mes = nil...keyc
000005c0: 6572 7420 3d20 7374 7269 6e67 732e 5472  ert = strings.Tr
000005d0: 696d 5370 6163 6528 6373 5b30 5d29 0a09  imSpace(cs[0])..
000005e0: 7d0a 0963 7320 3d20 7374 7269 6e67 732e  }..cs = strings.
000005f0: 5370 6c69 7428 6b65 7963 6572 742c 2022  Split(keycert, "
00000600: 2c22 290a 0969 6620 6c65 6e28 6373 2920  ,")..if len(cs) 
00000610: 213d 2032 207b 0a09 0972 6574 7572 6e20  != 2 {...return 
00000620: 6572 726f 7273 2e4e 6577 2822 6578 7065  errors.New("expe
00000630: 6374 6564 2063 6f6d 6d61 2073 6570 6172  cted comma separ
00000640: 6174 6564 2063 6572 7469 6669 6361 7465  ated certificate
00000650: 2061 6e64 206b 6579 2066 696c 6520 7061   and key file pa
00000660: 7468 7322 290a 097d 0a09 6e6b 632e 4365  ths")..}..nkc.Ce
00000670: 7274 4669 6c65 203d 2073 7472 696e 6773  rtFile = strings
00000680: 2e54 7269 6d53 7061 6365 2863 735b 305d  .TrimSpace(cs[0]
00000690: 290a 096e 6b63 2e4b 6579 4669 6c65 203d  )..nkc.KeyFile =
000006a0: 2073 7472 696e 6773 2e54 7269 6d53 7061   strings.TrimSpa
000006b0: 6365 2863 735b 315d 290a 0972 6574 7572  ce(cs[1])..retur
000006c0: 6e20 6e69 6c0a 7d0a 0a66 756e 6320 282a  n nil.}..func (*
000006d0: 4e61 6d65 6443 6572 744b 6579 2920 5479  NamedCertKey) Ty
000006e0: 7065 2829 2073 7472 696e 6720 7b0a 0972  pe() string {..r
000006f0: 6574 7572 6e20 226e 616d 6564 4365 7274  eturn "namedCert
00000700: 4b65 7922 0a7d 0a0a 2f2f 204e 616d 6564  Key".}..// Named
00000710: 4365 7274 4b65 7941 7272 6179 2069 7320  CertKeyArray is 
00000720: 6120 666c 6167 2076 616c 7565 2070 6172  a flag value par
00000730: 7369 6e67 204e 616d 6564 4365 7274 4b65  sing NamedCertKe
00000740: 7973 2c20 6561 6368 2070 6173 7365 6420  ys, each passed 
00000750: 7769 7468 2069 7473 206f 776e 0a2f 2f20  with its own.// 
00000760: 666c 6167 2069 6e73 7461 6e63 6520 2869  flag instance (i
00000770: 6e20 636f 6e74 7261 7374 2074 6f20 636f  n contrast to co
00000780: 6d6d 6120 7365 7061 7261 7465 6420 736c  mma separated sl
00000790: 6963 6573 292e 0a74 7970 6520 4e61 6d65  ices)..type Name
000007a0: 6443 6572 744b 6579 4172 7261 7920 7374  dCertKeyArray st
000007b0: 7275 6374 207b 0a09 7661 6c75 6520 2020  ruct {..value   
000007c0: 2a5b 5d4e 616d 6564 4365 7274 4b65 790a  *[]NamedCertKey.
000007d0: 0963 6861 6e67 6564 2062 6f6f 6c0a 7d0a  .changed bool.}.
000007e0: 0a76 6172 205f 2066 6c61 672e 5661 6c75  .var _ flag.Valu
000007f0: 6520 3d20 264e 616d 6564 4365 7274 4b65  e = &NamedCertKe
00000800: 7941 7272 6179 7b7d 0a0a 2f2f 204e 6577  yArray{}..// New
00000810: 4e61 6d65 644b 6579 4365 7274 4172 7261  NamedKeyCertArra
00000820: 7920 6372 6561 7465 7320 6120 6e65 7720  y creates a new 
00000830: 4e61 6d65 6443 6572 744b 6579 4172 7261  NamedCertKeyArra
00000840: 7920 7769 7468 2074 6865 2069 6e74 6572  y with the inter
00000850: 6e61 6c20 7661 6c75 650a 2f2f 2070 6f69  nal value.// poi
00000860: 6e74 696e 6720 746f 2070 2e0a 6675 6e63  nting to p..func
00000870: 204e 6577 4e61 6d65 6443 6572 744b 6579   NewNamedCertKey
00000880: 4172 7261 7928 7020 2a5b 5d4e 616d 6564  Array(p *[]Named
00000890: 4365 7274 4b65 7929 202a 4e61 6d65 6443  CertKey) *NamedC
000008a0: 6572 744b 6579 4172 7261 7920 7b0a 0972  ertKeyArray {..r
000008b0: 6574 7572 6e20 264e 616d 6564 4365 7274  eturn &NamedCert
000008c0: 4b65 7941 7272 6179 7b0a 0909 7661 6c75  KeyArray{...valu
000008d0: 653a 2070 2c0a 097d 0a7d 0a0a 6675 6e63  e: p,..}.}..func
000008e0: 2028 6120 2a4e 616d 6564 4365 7274 4b65   (a *NamedCertKe
000008f0: 7941 7272 6179 2920 5365 7428 7661 6c20  yArray) Set(val 
00000900: 7374 7269 6e67 2920 6572 726f 7220 7b0a  string) error {.
00000910: 096e 6b63 203a 3d20 4e61 6d65 6443 6572  .nkc := NamedCer
00000920: 744b 6579 7b7d 0a09 6572 7220 3a3d 206e  tKey{}..err := n
00000930: 6b63 2e53 6574 2876 616c 290a 0969 6620  kc.Set(val)..if 
00000940: 6572 7220 213d 206e 696c 207b 0a09 0972  err != nil {...r
00000950: 6574 7572 6e20 6572 720a 097d 0a09 6966  eturn err..}..if
00000960: 2021 612e 6368 616e 6765 6420 7b0a 0909   !a.changed {...
00000970: 2a61 2e76 616c 7565 203d 205b 5d4e 616d  *a.value = []Nam
00000980: 6564 4365 7274 4b65 797b 6e6b 637d 0a09  edCertKey{nkc}..
00000990: 0961 2e63 6861 6e67 6564 203d 2074 7275  .a.changed = tru
000009a0: 650a 097d 2065 6c73 6520 7b0a 0909 2a61  e..} else {...*a
000009b0: 2e76 616c 7565 203d 2061 7070 656e 6428  .value = append(
000009c0: 2a61 2e76 616c 7565 2c20 6e6b 6329 0a09  *a.value, nkc)..
000009d0: 7d0a 0972 6574 7572 6e20 6e69 6c0a 7d0a  }..return nil.}.
000009e0: 0a66 756e 6320 2861 202a 4e61 6d65 6443  .func (a *NamedC
000009f0: 6572 744b 6579 4172 7261 7929 2054 7970  ertKeyArray) Typ
00000a00: 6528 2920 7374 7269 6e67 207b 0a09 7265  e() string {..re
00000a10: 7475 726e 2022 6e61 6d65 6443 6572 744b  turn "namedCertK
00000a20: 6579 220a 7d0a 0a66 756e 6320 2861 202a  ey".}..func (a *
00000a30: 4e61 6d65 6443 6572 744b 6579 4172 7261  NamedCertKeyArra
00000a40: 7929 2053 7472 696e 6728 2920 7374 7269  y) String() stri
00000a50: 6e67 207b 0a09 6e6b 6373 203a 3d20 6d61  ng {..nkcs := ma
00000a60: 6b65 285b 5d73 7472 696e 672c 2030 2c20  ke([]string, 0, 
00000a70: 6c65 6e28 2a61 2e76 616c 7565 2929 0a09  len(*a.value))..
00000a80: 666f 7220 6920 3a3d 2072 616e 6765 202a  for i := range *
00000a90: 612e 7661 6c75 6520 7b0a 0909 6e6b 6373  a.value {...nkcs
00000aa0: 203d 2061 7070 656e 6428 6e6b 6373 2c20   = append(nkcs, 
00000ab0: 282a 612e 7661 6c75 6529 5b69 5d2e 5374  (*a.value)[i].St
00000ac0: 7269 6e67 2829 290a 097d 0a09 7265 7475  ring())..}..retu
00000ad0: 726e 2022 5b22 202b 2073 7472 696e 6773  rn "[" + strings
00000ae0: 2e4a 6f69 6e28 6e6b 6373 2c20 223b 2229  .Join(nkcs, ";")
00000af0: 202b 2022 5d22 0a7d 0a                    + "]".}.

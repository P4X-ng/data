# Root Containerfile for PacketFS Infinity (Podman preferred)
# Minimal, builds from repo root only (no vendor paths)

FROM docker.io/library/python:3.11-slim

WORKDIR /app
ENV VIRTUAL_ENV=/opt/venv
RUN python -m venv $VIRTUAL_ENV && $VIRTUAL_ENV/bin/pip install -U pip setuptools wheel
ENV PATH="$VIRTUAL_ENV/bin:$PATH"

# Install runtime deps from repo-root requirements.txt
COPY requirements.txt /tmp/requirements.txt
RUN pip install -r /tmp/requirements.txt

# Optional: build tools and ssh client (for scripts)
RUN apt-get update && apt-get install -y --no-install-recommends \
      openssh-client build-essential python3-dev && rm -rf /var/lib/apt/lists/*

# Copy PacketFS (root-level) and application code
COPY packetfs /app/packetfs
COPY app /app/app

# Generate dev TLS certs (optional). Comment this block if not desired.
# RUN python - <<'PY'
# from cryptography import x509
# from cryptography.x509.oid import NameOID
# from cryptography.hazmat.primitives import hashes
# from cryptography.hazmat.primitives.asymmetric import rsa
# from cryptography.hazmat.primitives.serialization import Encoding, PrivateFormat, NoEncryption
# import datetime, os
# base = '/app/certs'
# os.makedirs(base, exist_ok=True)
# cert_path = f'{base}/dev.crt'
# key_path = f'{base}/dev.key'
# if not (os.path.isfile(cert_path) and os.path.isfile(key_path)):
#     key = rsa.generate_private_key(public_exponent=65537, key_size=2048)
#     subject = x509.Name([
#         x509.NameAttribute(NameOID.COUNTRY_NAME, 'US'),
#         x509.NameAttribute(NameOID.ORGANIZATION_NAME, 'pfs-infinity'),
#         x509.NameAttribute(NameOID.COMMON_NAME, 'pfs-infinity.local'),
#     ])
#     cert = (x509.CertificateBuilder()
#             .subject_name(subject)
#             .issuer_name(subject)
#             .public_key(key.public_key())
#             .serial_number(x509.random_serial_number())
#             .not_valid_before(datetime.datetime.utcnow() - datetime.timedelta(days=1))
#             .not_valid_after(datetime.datetime.utcnow() + datetime.timedelta(days=825))
#             .sign(key, hashes.SHA256()))
#     with open(cert_path,'wb') as f: f.write(cert.public_bytes(Encoding.PEM))
#     with open(key_path,'wb') as f: f.write(key.private_bytes(Encoding.PEM, PrivateFormat.TraditionalOpenSSL, NoEncryption()))
# PY

# Quick import test at build-time
RUN python -c "import packetfs, packetfs.protocol, packetfs.filesystem.virtual_blob"

# Expose service port
EXPOSE 8811

# Default: run with Hypercorn; allow override with WS_PORT
ENV WS_PORT=8811 BIND=0.0.0.0 PFS_TLS=1 PFS_ARITH=1
CMD ["/opt/venv/bin/hypercorn", "--bind", "0.0.0.0:8811", "app.core.app:create_app()"]

FROM docker.io/library/python:3.11-slim

WORKDIR /app
ENV VIRTUAL_ENV=/opt/venv
RUN python -m venv $VIRTUAL_ENV && $VIRTUAL_ENV/bin/pip install -U pip setuptools wheel
ENV PATH="$VIRTUAL_ENV/bin:$PATH"

# Install runtime deps
COPY containers/backend/requirements.txt /tmp/requirements.txt
RUN pip install -r /tmp/requirements.txt

# Build tools and system deps needed for native extension (_bitpack) and SSH client
RUN apt-get update && apt-get install -y --no-install-recommends \
      openssh-client build-essential python3-dev && rm -rf /var/lib/apt/lists/*

# Copy PacketFS (root-level) into image
COPY packetfs /app/packetfs
RUN python -c "import packetfs, packetfs.protocol, packetfs.filesystem.virtual_blob"

# Copy app
COPY app /app/app

# Pre-create development TLS certificates
RUN python - <<'PY'
from cryptography import x509
from cryptography.x509.oid import NameOID
from cryptography.hazmat.primitives import hashes
from cryptography.hazmat.primitives.asymmetric import rsa
from cryptography.hazmat.primitives.serialization import Encoding, PrivateFormat, NoEncryption
import datetime, os
base = '/app/certs'
os.makedirs(base, exist_ok=True)
cert_path = f'{base}/dev.crt'
key_path = f'{base}/dev.key'
if not (os.path.isfile(cert_path) and os.path.isfile(key_path)):
    key = rsa.generate_private_key(public_exponent=65537, key_size=2048)
    subject = x509.Name([
        x509.NameAttribute(NameOID.COUNTRY_NAME, 'US'),
        x509.NameAttribute(NameOID.ORGANIZATION_NAME, 'pfs-infinity'),
        x509.NameAttribute(NameOID.COMMON_NAME, 'pfs-infinity.local'),
    ])
    cert = (x509.CertificateBuilder()
            .subject_name(subject)
            .issuer_name(subject)
            .public_key(key.public_key())
            .serial_number(x509.random_serial_number())
            .not_valid_before(datetime.datetime.utcnow() - datetime.timedelta(days=1))
            .not_valid_after(datetime.datetime.utcnow() + datetime.timedelta(days=825))
            .sign(key, hashes.SHA256()))
    with open(cert_path,'wb') as f: f.write(cert.public_bytes(Encoding.PEM))
    with open(key_path,'wb') as f: f.write(key.private_bytes(Encoding.PEM, PrivateFormat.TraditionalOpenSSL, NoEncryption()))
PY

# Install client tools into image
COPY scripts/pfcp /usr/local/bin/pfcp
COPY scripts/pfcp-ssh /usr/local/bin/pfcp-ssh
COPY scripts/pfcp-rsync /usr/local/bin/pfcp-rsync
COPY scripts/pfs /usr/local/bin/pfs
COPY scripts/pfcp-smart /usr/local/bin/pfcp-smart
RUN chmod +x /usr/local/bin/pfcp /usr/local/bin/pfcp-ssh /usr/local/bin/pfcp-rsync /usr/local/bin/pfs /usr/local/bin/pfcp-smart

# Backend startup wrapper honoring BIND and WS_PORT/PORT
COPY containers/backend/start-backend.sh /usr/local/bin/start-backend
RUN chmod +x /usr/local/bin/start-backend

EXPOSE 8811
CMD ["/usr/local/bin/start-backend"]

[{"data":"{\"name\":\"Squash the last N commits together\",\"command\":\"git reset --soft HEAD~{{num_commits}} && git commit\",\"tags\":[],\"description\":\"Squashes the last n commits together. Requires rewriting a commit message for the new squashed changes.\",\"arguments\":[{\"name\":\"num_commits\",\"arg_type\":\"Text\",\"description\":\"The number of commits that should be squashed together\",\"default_value\":null}],\"source_url\":null,\"author\":null,\"author_url\":null,\"shells\":[],\"environment_variables\":null}","id":1},{"data":"{\"type\":\"agent_mode\",\"name\":\"Create commit with description and push to origin\",\"query\":\"1.\\tReview all modified files and their changes.\\n2.\\tGenerate a clear, descriptive commit message summarizing the changes.\\n3.\\tStage all modified files using git add.\\n4.\\tCommit the changes using: git commit -m \\\"{{commit_message}}\\\".\\n5.\\tConfirm the commit was successful and display the resulting commit hash and message.\\n6.\\tPush the commit to the origin remote on the current branch.\",\"arguments\":[{\"name\":\"commit_message\",\"arg_type\":\"Text\",\"description\":null,\"default_value\":null}]}","id":2},{"data":"{\"name\":\"Undo the last Git commit\",\"command\":\"git reset HEAD~\",\"tags\":[],\"description\":null,\"arguments\":[],\"source_url\":null,\"author\":null,\"author_url\":null,\"shells\":[],\"environment_variables\":null}","id":3},{"data":"{\"type\":\"agent_mode\",\"name\":\"Create a PR from current branch\",\"query\":\"Help me create and submit a pull request by following these steps in order:\\n\\n1. First, show me the current status of my working directory:\\n   - Display any staged changes\\n   - Display any unstaged/uncommitted changes\\n   - Show the current branch name\\n\\n2. Format and clean up the code:\\n   - Detect the project language or framework if possible, and run the appropriate formatter. For instance, if it is a Go project,  run `go fmt ./...`, and if it is a Rust project, run `cargo fmt`\\n   - Stage any formatting changes\\n\\n3. Create a commit:\\n   - Generate a descriptive commit message following conventional commits format (e.g., feat:, fix:, docs:)\\n   - Include details about what changed and why\\n   - Commit all staged changes\\n\\n4. Compare with base branch:\\n   - Determine the default branch (main or develop)\\n   - Generate a diff against the default branch\\n   - Create a structured PR description based on the diff, following the repository's PR template\\n   - Include:\\n     * Summary of changes\\n     * Technical implementation details\\n     * Testing steps\\n     * Related issues/tickets\\n\\n5. Submit and open the PR:\\n   - Push changes to origin\\n   - Create PR using GitHub CLI (gh pr create)\\n   - Open the PR in browser (gh pr view --web)\\n\\nProvide clear feedback after each step is completed or if any errors occur.\\n\\nStay focused on the PR creation workflow and don't execute any commands outside this scope.\\n\\nExample good commit message:\\n\\\"feat: implement user authentication flow\\n- Add JWT token generation\\n- Create login endpoint\\n- Add password hashing\\n- Update user model\\\"\\n\\nExample bad commit message:\\n\\\"fixed stuff\\\"\\n\\\"updates\\\"\\n\\\"WIP\\\"\",\"description\":\"Prepares and submits a pull request from your current working branch. Checks Git status, formats code, creates a sensible commit, compares changes with the base branch, and opens a GitHub PR using the CLI.\",\"arguments\":[]}","id":4},{"data":"{\"type\":\"agent_mode\",\"name\":\"Review and fix changes on current branch\",\"query\":\"Help me review and fix changes on my current Git branch. \\n\\nStart by showing the current branch, staged and unstaged changes, and recent commits. Run the appropriate linters or analyzers based on the project language (e.g., ESLint, flake8, clippy) and surface any issues. \\n\\nWhen judging whether there are improvements\\n- take into account conventions of the current language and codebase style\\n- aim for clean, simple APIs\\n- report logic bugs\\n- report security issues\\n- report performance problems\\n\\nThen, display a diff of the current changes and highlight any problem areas. Suggest or apply fixes, format the code if needed, and restage the updated files. Finally, re-run checks to confirm everything is clean and ready to commit.\\n\\nProvide helpful feedback at each step and stop if any issues block progress. Do not perform unrelated Git actions or modify unrelated files.\",\"description\":\"Analyze your current Git branch for issues by checking status, running linters, reviewing diffs, and applying code fixes. Ensures your branch is clean and ready to commit or submit as a pull request.\",\"arguments\":[]}","id":5},{"data":"{\"type\":\"agent_mode\",\"name\":\"Generate a custom Warp theme\",\"query\":\"Detect the correct Warp themes directory based on the current operating system:\\n- On macOS, use ~/.warp/themes/\\n- On Linux, use ${XDG_DATA_HOME:-$HOME/.local/share}/warp-terminal/themes/\\n- On Windows, use $env:APPDATA\\\\warp\\\\Warp\\\\data\\\\themes\\\\\\n\\nCreate the directory if it doesn’t already exist. \\n\\nThen, generate a custom Warp theme named {{theme_name}} in valid YAML format, following the official structure from Warp’s documentation. Exclude the background_image field, and do not include any extra or missing fields. Save the theme as {{theme_name}}.yaml in the detected themes directory.\\n\\nOnce the theme is created and verified, confirm completion by telling me where the theme file was saved.\",\"description\":\"Generate and save a custom Warp terminal theme in the correct system-specific directory, following Warp’s official YAML format.\",\"arguments\":[{\"name\":\"theme_name\",\"arg_type\":\"Text\",\"description\":\"Customize your theme however you want.\",\"default_value\":\"Matrix\"}]}","id":6},{"data":"{\"type\":\"agent_mode\",\"name\":\"Explain how this codebase works\",\"query\":\"As a technical expert, analyze this codebase and provide a clear project overview:\\n\\n- Core Components: Describe the major components or modules, their responsibilities, and any key classes or functions they contain. Note any relevant design patterns or architectural approaches.\\n\\n- Component Interactions: Explain how the components interact, including data and control flow, communication methods, and any APIs or interfaces used. Highlight use of dependency injection or service patterns if applicable.\\n\\n- Deployment Architecture: Summarize the deployment setup, including build steps, external dependencies, required environments (e.g., dev, staging, prod), and infrastructure or containerization details.\\n\\n- Runtime Behavior: Describe how the application initializes, handles requests and responses, runs business workflows, and manages errors or background tasks.\\n\\nStay focused on providing a technical overview that helps a developer quickly understand how the system works. Avoid personal opinions or implementation suggestions unless specifically asked.\",\"description\":\"Analyze the structure of this codebase and provide a clear breakdown of its components, interactions, deployment setup, and runtime behavior to help developers quickly understand how the system works.\",\"arguments\":[]}","id":7},{"data":"{\"name\":\"Example workflow\",\"command\":\"echo hello, {{your_name}}\",\"tags\":[],\"description\":\"A workflow is a templated command that you can save for yourself and share with your team. Create workflows in Warp Drive or save them from commands you've already run.\",\"arguments\":[{\"name\":\"your_name\",\"arg_type\":\"Text\",\"description\":\"Who you are saying hello to\",\"default_value\":\"world\"}],\"source_url\":null,\"author\":null,\"author_url\":null,\"shells\":[],\"environment_variables\":null}","id":8},{"data":"{\"type\":\"agent_mode\",\"name\":\"Clone and install Warp's themes repository\",\"query\":\"Detect my current operating system. Based on that, navigate to the appropriate Warp themes directory (e.g. ~/.warp/ on macOS). \\n\\nThen, clone the official Warp themes repository using SSH (git@github.com:warpdotdev/themes.git) into that directory, following the structure and instructions provided in the repo’s README. If SSH does not work, try HTTPS (https://github.com/warpdotdev/themes.git) or via the GitHub CLI (gh repo clone warpdotdev/themes).\",\"description\":\"Clone the Warp community themes repository into the correct themes folder for your OS to add custom themes to Warp.\",\"arguments\":[]}","id":9},{"data":"{\"type\":\"agent_mode\",\"name\":\"Add tests to current Pull Request\",\"query\":\"Take a look at all of the changes in the PR that exists on the current branch. If no PR exists, ask the user if they want to create a PR. \\n\\nFor the changes that are in the current PR, try to understand if there are unit tests that should exist to exercise their functionality. If there are unit tests, suggest to the user writing those tests and describe what the tests would actually exercise. Then ask the user if they want to create the tests one by one. \\n\\nIf they do create the tests one at a time and run the test, making sure that it passes before creating the next test. Also, have the user look at the code for each test to make sure it's actually exercising what they think it should.\",\"arguments\":[]}","id":10},{"data":"{\"name\":\"TestWorkFlow\",\"command\":\"echo \\\"Hello $USER\\\"\",\"tags\":[],\"description\":\"testing\",\"arguments\":[],\"source_url\":null,\"author\":null,\"author_url\":null,\"shells\":[],\"environment_variables\":null}","id":13}]
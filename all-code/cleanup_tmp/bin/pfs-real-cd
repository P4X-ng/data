#!/usr/bin/env python3
"""
PacketFS Real Micro-VM Creator and CD Tool
==========================================

ACTUALLY CREATE AND CD TO REAL MICRO-VMS!

This tool creates REAL micro-VMs that you can actually CD to!
"""

import os
import sys
import time
import subprocess
from pathlib import Path

# Add VMKit to path
sys.path.insert(0, '/home/punk/Projects/VMKit')

try:
    import vmkit
    VMKIT_AVAILABLE = True
except ImportError:
    VMKIT_AVAILABLE = False

def create_real_microvm(vm_name: str) -> bool:
    """Create a real micro-VM using VMKit"""
    
    if not VMKIT_AVAILABLE:
        print("❌ VMKit not available")
        return False
    
    print(f"🚀 CREATING REAL MICRO-VM: {vm_name}")
    
    try:
        # Try to create a minimal VM
        # We'll need to use an existing image or create a minimal one
        
        # First, let's see what images are available
        print("🔍 Checking for available images...")
        
        # Look for cloud images
        cloud_image_paths = [
            "/var/lib/libvirt/images/ubuntu-22.04-server-cloudimg-amd64.img",
            "/home/punk/ubuntu-22.04-server-cloudimg-amd64.img",
            "ubuntu-22.04-server-cloudimg-amd64.img"
        ]
        
        image_path = None
        for path in cloud_image_paths:
            if os.path.exists(path):
                image_path = path
                break
        
        if not image_path:
            print("⚠️  No cloud image found, creating VM without image (will fail)")
            # For demo, we'll create a VM anyway to show the concept
        
        print(f"📀 Using image: {image_path or 'None (demo only)'}")
        
        # Create micro-VM with minimal resources
        vm = vmkit.SecureVM(
            name=vm_name,
            memory="256M",  # Minimal memory
            cpus=1,
            machine="q35",  # Use q35 since microvm might not be available
            secure_boot=False,  # Disable for speed
            graphics="none"  # Headless
        )
        
        if image_path:
            # Create with image if available
            cloud_image = vmkit.CloudImage(image_path)
            vm.image = cloud_image
        
        # Create the VM
        print("🏗️  Creating VM definition...")
        vm.create()
        
        print(f"✅ Real micro-VM '{vm_name}' created!")
        return True
        
    except Exception as e:
        print(f"❌ Failed to create micro-VM: {e}")
        return False

def cd_to_real_vm(vm_name: str) -> bool:
    """CD to a real VM by connecting via console"""
    
    print(f"🌐 CD'ing to real VM: {vm_name}")
    
    # Check if VM exists
    result = subprocess.run(['virsh', 'domstate', vm_name], 
                          capture_output=True, text=True)
    
    if result.returncode != 0:
        print(f"❌ VM '{vm_name}' not found")
        return False
    
    state = result.stdout.strip()
    print(f"📊 VM state: {state}")
    
    if state == "shut off":
        print("🚀 Starting VM...")
        start_result = subprocess.run(['virsh', 'start', vm_name],
                                    capture_output=True, text=True)
        if start_result.returncode != 0:
            print(f"❌ Failed to start VM: {start_result.stderr}")
            return False
        
        print("✅ VM started!")
        time.sleep(2)  # Wait for boot
    
    print(f"🔐 Connecting to VM console...")
    print(f"💡 Use Ctrl+] to disconnect from console")
    print(f"🎯 You are about to CD into VM '{vm_name}'!")
    
    # Actually connect to the VM console
    subprocess.run(['virsh', 'console', vm_name])
    
    return True

def list_real_vms():
    """List all real VMs"""
    
    print("🖥️  REAL VMs AVAILABLE:")
    
    result = subprocess.run(['virsh', 'list', '--all'], 
                          capture_output=True, text=True)
    
    if result.returncode == 0:
        print(result.stdout)
    else:
        print("❌ Failed to list VMs")

def main():
    """Main real CD CLI"""
    
    print("🌟 PACKETFS REAL MICRO-VM CD TOOL")
    print("=" * 60)
    print("🚀 CREATE AND CD TO ACTUAL MICRO-VMS!")
    print()
    
    if len(sys.argv) < 2:
        print("Usage:")
        print("  pfs-real-cd create <vm-name>    # Create real micro-VM")  
        print("  pfs-real-cd cd <vm-name>        # CD to real VM")
        print("  pfs-real-cd list                # List real VMs")
        print()
        print("Examples:")
        print("  pfs-real-cd create test-microvm")
        print("  pfs-real-cd cd test-microvm")
        print("  pfs-real-cd cd yomomma          # CD to existing VM")
        return
    
    command = sys.argv[1]
    
    if command == "create":
        if len(sys.argv) != 3:
            print("Usage: pfs-real-cd create <vm-name>")
            return
        
        vm_name = sys.argv[2]
        success = create_real_microvm(vm_name)
        
        if success:
            print(f"\\n🎉 SUCCESS! Now CD to it with:")
            print(f"   pfs-real-cd cd {vm_name}")
        else:
            print(f"\\n❌ Failed to create micro-VM")
    
    elif command == "cd":
        if len(sys.argv) != 3:
            print("Usage: pfs-real-cd cd <vm-name>")
            return
        
        vm_name = sys.argv[2]
        cd_to_real_vm(vm_name)
    
    elif command == "list":
        list_real_vms()
    
    else:
        print(f"Unknown command: {command}")

if __name__ == "__main__":
    main()
